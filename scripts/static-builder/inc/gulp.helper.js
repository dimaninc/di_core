// Generated by CoffeeScript 1.10.0
var Helper,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Helper = {
  getRootFolder: function() {
    return './';
  },
  getVersionFile: function() {
    return '../_cfg/lib/diStaticBuild.php';
  },
  fullPath: function(path) {
    var neg;
    neg = '';
    if (path.substr(0, 1) === '!') {
      neg = '!';
      path = path.substr(1);
    }
    return neg + this.getRootFolder() + path;
  },
  tryDone: function(tasksDone, tasksTotal, done) {
    if (tasksDone === tasksTotal) {
      return done();
    }
  },
  deleteFolderRecursive: function(folder, excludesList) {
    var fs, path;
    if (excludesList == null) {
      excludesList = [];
    }
    if (!fs) {
      fs = require('fs');
    }
    if (!path) {
      path = require('path');
    }
    if (fs.existsSync(folder)) {
      fs.readdirSync(folder).forEach(function(file, index) {
        var curPath;
        curPath = path.join(folder + '/' + file);
        if (indexOf.call(excludesList, curPath) >= 0) {
          return;
        }
        if (fs.lstatSync(curPath).isDirectory()) {
          deleteFolderRecursive(curPath);
        } else {
          fs.unlinkSync(curPath);
        }
      });
      fs.rmdirSync(folder);
    }
  },
  copyCoreAssets: function(gulp, done) {
    console.log('Copying CSS');
    gulp.src(['../vendor/dimaninc/di_core/css/**/*']).pipe(gulp.dest('../htdocs/assets/styles/_core/'));
    console.log('Copying Fonts');
    gulp.src(['../vendor/dimaninc/di_core/fonts/**/*']).pipe(gulp.dest('../htdocs/assets/fonts/'));
    console.log('Copying Images');
    gulp.src(['../vendor/dimaninc/di_core/i/**/*']).pipe(gulp.dest('../htdocs/assets/images/_core/'));
    console.log('Copying JS');
    gulp.src(['../vendor/dimaninc/di_core/js/**/*']).pipe(gulp.dest('../htdocs/assets/js/_core/'));
    console.log('Copying Vendor libs');
    gulp.src(['../vendor/dimaninc/di_core/vendor/**/*']).pipe(gulp.dest('../htdocs/assets/vendor/'));
    return done();
  },
  getFolders: function() {
    return ['_admin/_inc/cache', '_cfg/cache', 'db/dump', 'htdocs/assets/fonts', 'htdocs/assets/images/_core', 'htdocs/assets/js/_core', 'htdocs/assets/styles/_core', 'htdocs/uploads', 'log', 'log/db', 'log/debug'];
  },
  createFolders: function(done) {
    var folder, folders, i, len, mkdirp, results, tasksDone, tasksTotal;
    if (!mkdirp) {
      mkdirp = require('mkdirp');
    }
    folders = this.getFolders().map(function(f) {
      return '../' + f;
    });
    tasksTotal = folders.length;
    tasksDone = 0;
    results = [];
    for (i = 0, len = folders.length; i < len; i++) {
      folder = folders[i];
      results.push((function(folder) {
        return mkdirp(folder, {
          mode: 0x1ff
        }, function(err) {
          if (err) {
            console.error(err);
          } else {
            console.log(folder, 'created');
          }
          return Helper.tryDone(++tasksDone, tasksTotal, done);
        });
      })(folder));
    }
    return results;
  },
  writeVersionFile: function() {
    var fs;
    if (!fs) {
      fs = require('fs');
    }
    return fs.writeFileSync(this.getRootFolder() + this.getVersionFile(), '<?php\nclass diStaticBuild\n{\n    const VERSION = ' + (new Date()).getTime() + ';\n}');
  }
};

module.exports = Helper;

//# sourceMappingURL=gulp.helper.js.map
