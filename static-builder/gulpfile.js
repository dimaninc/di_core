// Generated by CoffeeScript 1.10.0
var concat, cssFiles, cssFolder, cssOutput, csso, fullPath, gulp, gulpBowerFiles, rename, rootFolder, spritesCssOutputFolder, spritesImageName, spritesImageOutputFolder, spritesMask, spritesmith, stylus, stylusFn, stylusFolder, uglify, watchSettings;

gulp = require('gulp');

spritesmith = require('gulp.spritesmith');

stylus = require('gulp-stylus');

csso = require('gulp-csso');

uglify = require('gulp-uglify');

concat = require('gulp-concat');

gulpBowerFiles = require('gulp-bower-files');

rename = require('gulp-rename');

rootFolder = './../';

fullPath = function(path) {
  var neg;
  neg = '';
  if (path.substr(0, 1) === '!') {
    neg = '!';
    path = path.substr(1);
  }
  return neg + rootFolder + path;
};

cssFolder = 'css/';

cssOutput = 'full-admin.css';

cssFiles = ['css/admin/*.css', 'css/stylus/buttons.css'];

spritesImageOutputFolder = 'i/admin/';

spritesMask = 'i/admin/sprite-src/*.png';

spritesImageName = 'buttons.png';

spritesCssOutputFolder = cssFolder + 'stylus/';

stylusFolder = cssFolder + 'stylus';

stylusFn = stylusFolder + '/buttons.styl';

watchSettings = {
  'stylus-sprite': {
    mask: [spritesMask]
  },
  'stylus': {
    mask: [stylusFolder + '**/*.styl']
  },
  'css-concat': {
    mask: cssFiles
  },
  'css-min': {
    mask: ['css/admin/full-admin.css']
  }
};

gulp.task('stylus-sprite', function() {
  var spriteData;
  spriteData = gulp.src(fullPath(spritesMask)).pipe(spritesmith({
    imgName: spritesImageName,
    cssName: 'sprite.styl',
    cssFormat: 'stylus',
    algorithm: 'binary-tree',
    cssTemplate: function(data) {
      var buttons, components, i, item, len, ref, spriteCall, timestamp, vars;
      timestamp = (new Date).getTime();
      vars = "$admin-buttons-timestamp = " + timestamp + "\n";
      buttons = ".nicetable-button\n  sprite $admin-buttons-empty\n";
      ref = data.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        vars += "$admin-buttons-" + item.name + " = " + item.px.offset_x + " " + item.px.offset_y + " " + item.px.width + " " + item.px.height + "\n";
        components = item.name.split("-");
        spriteCall = "sprite $admin-buttons-" + item.name + "\n";
        if (components.length > 1) {
          buttons += ("  &[data-action=\"" + components[0] + "\"][data-state=\"" + components[1] + "\"]\n    ") + spriteCall;
        } else {
          buttons += ("  &[data-action=\"" + item.name + "\"]\n    ") + spriteCall;
        }
      }
      return vars + "\n" + buttons;
    }
  })).on('error', console.log);
  spriteData.img.pipe(gulp.dest(fullPath(spritesImageOutputFolder)));
  spriteData.css.pipe(gulp.dest(fullPath(spritesCssOutputFolder)));
  return true;
});

gulp.task('stylus', function() {
  gulp.src(fullPath(stylusFn)).pipe(stylus({
    use: ['nib']
  })).on('error', console.log).pipe(gulp.dest(fullPath(stylusFolder)));
  return true;
});

gulp.task('css-concat', function() {
  gulp.src(cssFiles.map(function(f) {
    return fullPath(f);
  })).pipe(concat(cssOutput)).on('error', console.log).pipe(gulp.dest(fullPath(cssFolder)));
  return true;
});

gulp.task('css-min', function() {
  gulp.src(fullPath(cssFolder + cssOutput)).pipe(csso()).on('error', console.log).pipe(rename({
    suffix: '.min'
  })).pipe(gulp.dest(fullPath(cssFolder)));
  return true;
});

gulp.task('build', function() {
  gulp.run('stylus-sprite');
  gulp.run('stylus');
  gulp.run('css-concat');
  return gulp.run('css-min');
});

gulp.task('watch', function() {
  var mask, process, results, watchClosure;
  results = [];
  for (process in watchSettings) {
    mask = watchSettings[process].mask.map(function(f) {
      return fullPath(f);
    });
    results.push(watchClosure = (function(process, mask) {
      gulp.watch(mask, function() {
        gulp.run(process);
        return true;
      });
      return true;
    })(process, mask));
  }
  return results;
});

//# sourceMappingURL=gulpfile.js.map
