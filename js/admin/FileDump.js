// Generated by CoffeeScript 2.5.1
var FileDump;

FileDump = function () {
  class FileDump {
    constructor(opts) {
      this.opts = $.extend({
        workerUri: null
      }, opts);
      this.setupCreateButton().setupDumpButtons();
    }

    setupCreateButton() {
      $('[data-action="create.files"]').on('click', () => {
        this.log('Creating files dump...');
        $.post(this.opts.workerUri + 'create', {}, res => {
          if (res.ok) {
            return this.log('Files dump created');
          } else {
            return this.log('Error: ' + res.message);
          }
        });
        return false;
      });
      return this;
    }

    setupDumpButtons() {
      var self;
      self = this;
      $(document.body).on('click', '[data-type="file"] button[data-action="restore"]', function () {
        return self.restoreDump($(this).closest('[data-filename]').data('filename'));
      }).on('click', '[data-type="file"] button[data-action="download"]', function () {
        return self.downloadDump($(this).closest('[data-filename]').data('filename'));
      }).on('click', '[data-type="file"] button[data-action="delete"]', function () {
        return self.deleteDump($(this).closest('[data-filename]').data('filename'));
      });
      return this;
    }

    addDumpRow(res) {
      var $size, interval, prev_size, sizeStr; //sizeStr = res.size and (', ' + size_in_bytes(res.size))

      sizeStr = ', <span data-field="size">...</span>';
      console.log($('.db-dump-rows[data-type="file"] tbody tr:first-child').length); //'<button type="button" data-action="restore">Restore</button> ' +

      $('.db-dump-rows[data-type="file"] tbody tr:first-child').after('<tr data-filename="{0}">'.format(res.file) + '<td><b>' + res.file + '</b> ' + '<small>(' + new Date().toLocaleString() + sizeStr + ')</small></td>' + '<td>' + '<button type="button" data-action="download">Download</button> ' + '<button type="button" data-action="delete">Delete</button>' + '</td></tr>');
      $size = $('.db-dump-rows[data-type="file"] tr[data-filename="{0}"]'.format(res.file));
      prev_size = 0;
      return interval = setInterval(() => {
        return $.get(this.opts.workerUri + 'update_size/', {}, res => {
          $size.html(size_in_bytes(res.size));

          if (prev_size === res.size) {
            clearInterval(interval);
          }

          return prev_size = res.size;
        });
      }, 2000);
    }

    restoreDump(file, folderId) {
      if (!confirm("Are your sure you want to restore this file dump?\nWarning! Current files might be deleted or damaged!")) {
        return this;
      }

      this.log('Restoring file dump ' + file + '...');
      this.worker('restore', {
        file: file,
        folderId: folderId
      });
      return this;
    }

    downloadDump(file, folderId) {
      this.log('Downloading file dump ' + file + '...');
      this.worker('download', {
        file: file,
        folderId: folderId
      });
      return this;
    }

    deleteDump(file) {
      if (!confirm('Are you sure you want to delete the file dump ' + file + '?')) {
        return this;
      }

      this.log('Deleting file dump ' + file + '...');
      this.worker('delete', {
        file: file,
        folderId: 1
      });
      return this;
    }

    worker(action, options) {
      var urlBase;

      if (typeof options !== 'object') {
        options = {
          file: options
        };
      }

      options = $.extend({
        file: '',
        folderId: 0
      }, options);
      urlBase = this.opts.workerUri + action + '/';

      if (action === 'download') {
        options.headers = 1;
        window.location.href = urlBase + '?' + $.param(options);
        return false;
      }

      $.get(urlBase, options, res => {
        if (!res.ok) {
          this.log('Unable to complete action `' + action + '` with file `' + options.file + '`');
          return false;
        }

        if (action === 'create') {
          this.log('Dump has been created');
          return this.addDumpRow(res);
        } else if (action === 'restore') {
          return this.log('Dump ' + options.file + ' has been successfully restored');
        } else if (action === 'delete') {
          this.log(res.file + ' has been deleted');
          return $('.db-dump-rows[data-type="file"] tbody tr[data-filename="' + res.file + '"]').fadeOut();
        } else {
          return this.log('Unknown action "' + action + '"');
        }
      });
      return this;
    }

    log(message) {
      A.console.add(message);
      return this;
    }

    error(message) {
      alert(message);
      return this;
    }

  }

  ;
  FileDump;
  return FileDump;
}.call(this);
//# sourceMappingURL=FileDump.js.map
