// Generated by CoffeeScript 1.12.7
var FileDump;

FileDump = (function() {
  function FileDump(opts) {
    this.opts = $.extend({
      workerUri: null
    }, opts);
    this.readVocabulary().setupDumpButtons();
  }

  FileDump.prototype.readVocabulary = function() {
    this.wrapper = $('.dump-wrapper');
    this.local = this.wrapper.data('vocabulary');
    return this;
  };

  FileDump.prototype.l = function(key) {
    return this.local[key];
  };

  FileDump.prototype.setupDumpButtons = function() {
    var self;
    self = this;
    $('[data-action="create.files"]').on('click', (function(_this) {
      return function() {
        return _this.createDump();
      };
    })(this));
    $(document.body).on('click', '[data-type="file"] button[data-action="restore"]', function() {
      return self.restoreDump($(this).closest('[data-filename]').data('filename'));
    }).on('click', '[data-type="file"] button[data-action="download"]', function() {
      return self.downloadDump($(this).closest('[data-filename]').data('filename'));
    }).on('click', '[data-type="file"] button[data-action="delete"]', function() {
      return self.deleteDump($(this).closest('[data-filename]').data('filename'));
    });
    return this;
  };

  FileDump.prototype.addDumpRow = function(res) {
    var $size, html, interval, prev_size;
    html = '<tr data-filename="{0}">'.format(res.file) + '<td><b>' + res.file + '</b> ' + '<small>(' + (new Date().toLocaleString()) + ' , <span data-field="size">‚è≥</span>)</small></td>' + '<td>' + '<button type="button" data-action="download">{0}</button> '.format(this.l('dump.download')) + '<button type="button" data-action="delete">{0}</button>'.format(this.l('dump.delete')) + '</td></tr>';
    $('.db-dump-rows[data-type="file"] tbody tr:first-child').after(html);
    $('.db-dump-rows[data-type="file"] tbody tr[data-no-files]').remove();
    $size = $('.db-dump-rows[data-type="file"] tr[data-filename="{0}"] [data-field="size"]'.format(res.file));
    prev_size = 0;
    interval = setInterval((function(_this) {
      return function() {
        return $.get(_this.opts.workerUri + 'update_size/', {
          file: res.file
        }, function(res) {
          if (!interval || res.size === false) {
            return;
          }
          $size.addClass('in-progress').html(size_in_bytes(res.size));
          if (prev_size === res.size) {
            clearInterval(interval);
            $size.removeClass('in-progress');
          }
          return prev_size = res.size;
        });
      };
    })(this), 1000);
    return this;
  };

  FileDump.prototype.createDump = function() {
    this.log('Creating files dump...');
    this.worker('create');
    return this;
  };

  FileDump.prototype.restoreDump = function(file, folderId) {
    if (!confirm("Are your sure you want to restore this file dump?\nWarning! Current files might be deleted or damaged!")) {
      return this;
    }
    this.log('Restoring file dump ' + file + '...');
    this.worker('restore', {
      file: file,
      folderId: folderId
    });
    return this;
  };

  FileDump.prototype.downloadDump = function(file, folderId) {
    this.log('Downloading file dump ' + file + '...');
    this.worker('download', {
      file: file,
      folderId: folderId
    });
    return this;
  };

  FileDump.prototype.deleteDump = function(file) {
    if (!confirm('Are you sure you want to delete the file dump ' + file + '?')) {
      return this;
    }
    this.log('Deleting file dump ' + file + '...');
    this.worker('delete', {
      file: file,
      folderId: 1
    });
    return this;
  };

  FileDump.prototype.worker = function(action, options) {
    var urlBase;
    if (typeof options !== 'object') {
      options = {
        file: options
      };
    }
    options = $.extend({
      file: '',
      folderId: 0
    }, options);
    urlBase = this.opts.workerUri + action + '/';
    if (action === 'download') {
      options.headers = 1;
      window.location.href = urlBase + '?' + $.param(options);
      return false;
    }
    $.get(urlBase, options, (function(_this) {
      return function(res) {
        if (!res.ok) {
          _this.log('Unable to complete action `' + action + '` with file `' + options.file + '`');
          _this.log('Error: ' + res.message);
          return false;
        }
        if (action === 'create') {
          _this.log('Dump has been created');
          return _this.addDumpRow(res);
        } else if (action === 'restore') {
          return _this.log('Dump ' + options.file + ' has been successfully restored');
        } else if (action === 'delete') {
          _this.log(res.file + ' has been deleted');
          return $('.db-dump-rows[data-type="file"] tbody tr[data-filename="' + res.file + '"]').fadeOut();
        } else {
          return _this.log('Unknown action "' + action + '"');
        }
      };
    })(this));
    return this;
  };

  FileDump.prototype.log = function(message) {
    A.console.add(message);
    return this;
  };

  FileDump.prototype.error = function(message) {
    alert(message);
    return this;
  };

  return FileDump;

})();

//# sourceMappingURL=FileDump.js.map
